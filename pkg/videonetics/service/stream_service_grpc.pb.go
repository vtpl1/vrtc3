// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: stream_service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StreamService_WriteFrame_FullMethodName           = "/stream_service.StreamService/WriteFrame"
	StreamService_ReadFrame_FullMethodName            = "/stream_service.StreamService/ReadFrame"
	StreamService_SetChannelAlteration_FullMethodName = "/stream_service.StreamService/SetChannelAlteration"
	StreamService_GetChannelAlteration_FullMethodName = "/stream_service.StreamService/GetChannelAlteration"
	StreamService_WritePVAData_FullMethodName         = "/stream_service.StreamService/WritePVAData"
	StreamService_ReadPVAData_FullMethodName          = "/stream_service.StreamService/ReadPVAData"
	StreamService_WriteFramePVA_FullMethodName        = "/stream_service.StreamService/WriteFramePVA"
	StreamService_ReadFramePVA_FullMethodName         = "/stream_service.StreamService/ReadFramePVA"
)

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamServiceClient interface {
	WriteFrame(ctx context.Context, opts ...grpc.CallOption) (StreamService_WriteFrameClient, error)
	ReadFrame(ctx context.Context, in *ReadFrameRequest, opts ...grpc.CallOption) (StreamService_ReadFrameClient, error)
	SetChannelAlteration(ctx context.Context, in *SetChannelAlterationRequest, opts ...grpc.CallOption) (*SetChannelAlterationResponse, error)
	GetChannelAlteration(ctx context.Context, in *GetChannelAlterationRequest, opts ...grpc.CallOption) (*GetChannelAlterationResponse, error)
	WritePVAData(ctx context.Context, opts ...grpc.CallOption) (StreamService_WritePVADataClient, error)
	ReadPVAData(ctx context.Context, in *ReadPVADataRequest, opts ...grpc.CallOption) (StreamService_ReadPVADataClient, error)
	WriteFramePVA(ctx context.Context, opts ...grpc.CallOption) (StreamService_WriteFramePVAClient, error)
	ReadFramePVA(ctx context.Context, in *ReadFramePVARequest, opts ...grpc.CallOption) (StreamService_ReadFramePVAClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) WriteFrame(ctx context.Context, opts ...grpc.CallOption) (StreamService_WriteFrameClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[0], StreamService_WriteFrame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceWriteFrameClient{ClientStream: stream}
	return x, nil
}

type StreamService_WriteFrameClient interface {
	Send(*WriteFrameRequest) error
	CloseAndRecv() (*WriteFrameResponse, error)
	grpc.ClientStream
}

type streamServiceWriteFrameClient struct {
	grpc.ClientStream
}

func (x *streamServiceWriteFrameClient) Send(m *WriteFrameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceWriteFrameClient) CloseAndRecv() (*WriteFrameResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteFrameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) ReadFrame(ctx context.Context, in *ReadFrameRequest, opts ...grpc.CallOption) (StreamService_ReadFrameClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[1], StreamService_ReadFrame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceReadFrameClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_ReadFrameClient interface {
	Recv() (*ReadFrameResponse, error)
	grpc.ClientStream
}

type streamServiceReadFrameClient struct {
	grpc.ClientStream
}

func (x *streamServiceReadFrameClient) Recv() (*ReadFrameResponse, error) {
	m := new(ReadFrameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) SetChannelAlteration(ctx context.Context, in *SetChannelAlterationRequest, opts ...grpc.CallOption) (*SetChannelAlterationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetChannelAlterationResponse)
	err := c.cc.Invoke(ctx, StreamService_SetChannelAlteration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) GetChannelAlteration(ctx context.Context, in *GetChannelAlterationRequest, opts ...grpc.CallOption) (*GetChannelAlterationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelAlterationResponse)
	err := c.cc.Invoke(ctx, StreamService_GetChannelAlteration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) WritePVAData(ctx context.Context, opts ...grpc.CallOption) (StreamService_WritePVADataClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[2], StreamService_WritePVAData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceWritePVADataClient{ClientStream: stream}
	return x, nil
}

type StreamService_WritePVADataClient interface {
	Send(*WritePVADataRequest) error
	CloseAndRecv() (*WritePVADataResponse, error)
	grpc.ClientStream
}

type streamServiceWritePVADataClient struct {
	grpc.ClientStream
}

func (x *streamServiceWritePVADataClient) Send(m *WritePVADataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceWritePVADataClient) CloseAndRecv() (*WritePVADataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WritePVADataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) ReadPVAData(ctx context.Context, in *ReadPVADataRequest, opts ...grpc.CallOption) (StreamService_ReadPVADataClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[3], StreamService_ReadPVAData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceReadPVADataClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_ReadPVADataClient interface {
	Recv() (*ReadPVADataResponse, error)
	grpc.ClientStream
}

type streamServiceReadPVADataClient struct {
	grpc.ClientStream
}

func (x *streamServiceReadPVADataClient) Recv() (*ReadPVADataResponse, error) {
	m := new(ReadPVADataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) WriteFramePVA(ctx context.Context, opts ...grpc.CallOption) (StreamService_WriteFramePVAClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[4], StreamService_WriteFramePVA_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceWriteFramePVAClient{ClientStream: stream}
	return x, nil
}

type StreamService_WriteFramePVAClient interface {
	Send(*WriteFramePVARequest) error
	CloseAndRecv() (*WriteFramePVAResponse, error)
	grpc.ClientStream
}

type streamServiceWriteFramePVAClient struct {
	grpc.ClientStream
}

func (x *streamServiceWriteFramePVAClient) Send(m *WriteFramePVARequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceWriteFramePVAClient) CloseAndRecv() (*WriteFramePVAResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteFramePVAResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) ReadFramePVA(ctx context.Context, in *ReadFramePVARequest, opts ...grpc.CallOption) (StreamService_ReadFramePVAClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[5], StreamService_ReadFramePVA_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceReadFramePVAClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_ReadFramePVAClient interface {
	Recv() (*ReadFramePVAResponse, error)
	grpc.ClientStream
}

type streamServiceReadFramePVAClient struct {
	grpc.ClientStream
}

func (x *streamServiceReadFramePVAClient) Recv() (*ReadFramePVAResponse, error) {
	m := new(ReadFramePVAResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility
type StreamServiceServer interface {
	WriteFrame(StreamService_WriteFrameServer) error
	ReadFrame(*ReadFrameRequest, StreamService_ReadFrameServer) error
	SetChannelAlteration(context.Context, *SetChannelAlterationRequest) (*SetChannelAlterationResponse, error)
	GetChannelAlteration(context.Context, *GetChannelAlterationRequest) (*GetChannelAlterationResponse, error)
	WritePVAData(StreamService_WritePVADataServer) error
	ReadPVAData(*ReadPVADataRequest, StreamService_ReadPVADataServer) error
	WriteFramePVA(StreamService_WriteFramePVAServer) error
	ReadFramePVA(*ReadFramePVARequest, StreamService_ReadFramePVAServer) error
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (UnimplementedStreamServiceServer) WriteFrame(StreamService_WriteFrameServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteFrame not implemented")
}
func (UnimplementedStreamServiceServer) ReadFrame(*ReadFrameRequest, StreamService_ReadFrameServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFrame not implemented")
}
func (UnimplementedStreamServiceServer) SetChannelAlteration(context.Context, *SetChannelAlterationRequest) (*SetChannelAlterationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChannelAlteration not implemented")
}
func (UnimplementedStreamServiceServer) GetChannelAlteration(context.Context, *GetChannelAlterationRequest) (*GetChannelAlterationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelAlteration not implemented")
}
func (UnimplementedStreamServiceServer) WritePVAData(StreamService_WritePVADataServer) error {
	return status.Errorf(codes.Unimplemented, "method WritePVAData not implemented")
}
func (UnimplementedStreamServiceServer) ReadPVAData(*ReadPVADataRequest, StreamService_ReadPVADataServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadPVAData not implemented")
}
func (UnimplementedStreamServiceServer) WriteFramePVA(StreamService_WriteFramePVAServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteFramePVA not implemented")
}
func (UnimplementedStreamServiceServer) ReadFramePVA(*ReadFramePVARequest, StreamService_ReadFramePVAServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFramePVA not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_WriteFrame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).WriteFrame(&streamServiceWriteFrameServer{ServerStream: stream})
}

type StreamService_WriteFrameServer interface {
	SendAndClose(*WriteFrameResponse) error
	Recv() (*WriteFrameRequest, error)
	grpc.ServerStream
}

type streamServiceWriteFrameServer struct {
	grpc.ServerStream
}

func (x *streamServiceWriteFrameServer) SendAndClose(m *WriteFrameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceWriteFrameServer) Recv() (*WriteFrameRequest, error) {
	m := new(WriteFrameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_ReadFrame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFrameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).ReadFrame(m, &streamServiceReadFrameServer{ServerStream: stream})
}

type StreamService_ReadFrameServer interface {
	Send(*ReadFrameResponse) error
	grpc.ServerStream
}

type streamServiceReadFrameServer struct {
	grpc.ServerStream
}

func (x *streamServiceReadFrameServer) Send(m *ReadFrameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_SetChannelAlteration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelAlterationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).SetChannelAlteration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_SetChannelAlteration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).SetChannelAlteration(ctx, req.(*SetChannelAlterationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_GetChannelAlteration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelAlterationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).GetChannelAlteration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_GetChannelAlteration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).GetChannelAlteration(ctx, req.(*GetChannelAlterationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_WritePVAData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).WritePVAData(&streamServiceWritePVADataServer{ServerStream: stream})
}

type StreamService_WritePVADataServer interface {
	SendAndClose(*WritePVADataResponse) error
	Recv() (*WritePVADataRequest, error)
	grpc.ServerStream
}

type streamServiceWritePVADataServer struct {
	grpc.ServerStream
}

func (x *streamServiceWritePVADataServer) SendAndClose(m *WritePVADataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceWritePVADataServer) Recv() (*WritePVADataRequest, error) {
	m := new(WritePVADataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_ReadPVAData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadPVADataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).ReadPVAData(m, &streamServiceReadPVADataServer{ServerStream: stream})
}

type StreamService_ReadPVADataServer interface {
	Send(*ReadPVADataResponse) error
	grpc.ServerStream
}

type streamServiceReadPVADataServer struct {
	grpc.ServerStream
}

func (x *streamServiceReadPVADataServer) Send(m *ReadPVADataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_WriteFramePVA_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).WriteFramePVA(&streamServiceWriteFramePVAServer{ServerStream: stream})
}

type StreamService_WriteFramePVAServer interface {
	SendAndClose(*WriteFramePVAResponse) error
	Recv() (*WriteFramePVARequest, error)
	grpc.ServerStream
}

type streamServiceWriteFramePVAServer struct {
	grpc.ServerStream
}

func (x *streamServiceWriteFramePVAServer) SendAndClose(m *WriteFramePVAResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceWriteFramePVAServer) Recv() (*WriteFramePVARequest, error) {
	m := new(WriteFramePVARequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_ReadFramePVA_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFramePVARequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).ReadFramePVA(m, &streamServiceReadFramePVAServer{ServerStream: stream})
}

type StreamService_ReadFramePVAServer interface {
	Send(*ReadFramePVAResponse) error
	grpc.ServerStream
}

type streamServiceReadFramePVAServer struct {
	grpc.ServerStream
}

func (x *streamServiceReadFramePVAServer) Send(m *ReadFramePVAResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream_service.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetChannelAlteration",
			Handler:    _StreamService_SetChannelAlteration_Handler,
		},
		{
			MethodName: "GetChannelAlteration",
			Handler:    _StreamService_GetChannelAlteration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteFrame",
			Handler:       _StreamService_WriteFrame_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFrame",
			Handler:       _StreamService_ReadFrame_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WritePVAData",
			Handler:       _StreamService_WritePVAData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadPVAData",
			Handler:       _StreamService_ReadPVAData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteFramePVA",
			Handler:       _StreamService_WriteFramePVA_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFramePVA",
			Handler:       _StreamService_ReadFramePVA_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream_service.proto",
}
